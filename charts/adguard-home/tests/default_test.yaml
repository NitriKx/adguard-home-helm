suite: test default configuration
templates:
  - deployment.yaml
tests:
  - it: should render deployment with default values
    set:
      image.tag: "v0.107.43"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.template.spec.containers[0].image
          value: 11notes/adguard:v0.107.43
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 80
      - equal:
          path: spec.template.spec.containers[0].ports[1].containerPort
          value: 443
      - equal:
          path: spec.template.spec.containers[0].ports[2].containerPort
          value: 443
      - equal:
          path: spec.template.spec.containers[0].ports[3].containerPort
          value: 3000
      - equal:
          path: spec.template.spec.containers[0].ports[4].containerPort
          value: 53
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: http-admin
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[0]
          value: /usr/local/bin/dnslookup
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[1]
          value: .
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[2]
          value: NS
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[3]
          value: 127.0.0.1
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 30
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: TZ
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: UTC

---
suite: test default service configuration
templates:
  - service.yaml
tests:
  - it: should render DNS service with default values
    documentIndex: 0
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.type
          value: LoadBalancer
      - equal:
          path: spec.ports[0].port
          value: 53
      - equal:
          path: spec.ports[1].port
          value: 53

---
suite: test default PVC configuration
templates:
  - pvc.yaml
tests:
  - it: should not render PVCs when persistence is disabled by default
    asserts:
      - hasDocuments:
          count: 0

---
suite: test default ingress configuration
templates:
  - ingress.yaml
tests:
  - it: should not render ingress by default
    asserts:
      - hasDocuments:
          count: 0

---
suite: test health checks disabled
templates:
  - deployment.yaml
tests:
  - it: should not include probes when health checks are disabled
    set:
      healthCheck.enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.containers[0].readinessProbe
      - notExists:
          path: spec.template.spec.containers[0].livenessProbe
      - notExists:
          path: spec.template.spec.containers[0].startupProbe

---
suite: test custom timezone configuration
templates:
  - deployment.yaml
tests:
  - it: should use custom timezone when configured
    set:
      adguardHome.timezone: "America/New_York"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: TZ
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: America/New_York

---
suite: test AdGuard Home config YAML
templates:
  - deployment.yaml
tests:
  - it: should not create init container when configYaml is not specified
    set:
      adguardHome.configYaml:
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.initContainers

  - it: should create init container when configYaml is specified
    set:
      adguardHome.configYaml:
          bind_host: 0.0.0.0
          bind_port: 80
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: adguard-home-config
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].name
          value: config
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].mountPath
          value: /adguard/etc/

---
suite: test StatefulSet configuration
templates:
  - deployment.yaml
tests:
  - it: should render StatefulSet when workloadType is StatefulSet
    set:
      workloadType: StatefulSet
      persistence.enabled: true
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.serviceName
          value: RELEASE-NAME-adguard-home
      - equal:
          path: spec.replicas
          value: 1
      - exists:
          path: spec.volumeClaimTemplates
      - equal:
          path: spec.volumeClaimTemplates[0].metadata.name
          value: config
      - equal:
          path: spec.volumeClaimTemplates[1].metadata.name
          value: work
      - notExists:
          path: spec.template.spec.volumes[0].persistentVolumeClaim

  - it: should render Deployment with custom replicas
    set:
      replicas: 3
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.replicas
          value: 3

  - it: should render StatefulSet with custom replicas
    set:
      workloadType: StatefulSet
      persistence.enabled: true
      replicas: 2
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.replicas
          value: 2

  - it: should render StatefulSet with emptyDir volumes when persistence is disabled
    set:
      workloadType: StatefulSet
      persistence.enabled: false
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.serviceName
          value: RELEASE-NAME-adguard-home
      - notExists:
          path: spec.volumeClaimTemplates
      - equal:
          path: spec.template.spec.volumes[0].name
          value: run
      - equal:
          path: spec.template.spec.volumes[0].emptyDir.sizeLimit
          value: 10Mi
      - equal:
          path: spec.template.spec.volumes[1].name
          value: config
      - equal:
          path: spec.template.spec.volumes[1].emptyDir
          value: {}
      - equal:
          path: spec.template.spec.volumes[2].name
          value: work
      - equal:
          path: spec.template.spec.volumes[2].emptyDir
          value: {}

  - it: should render Deployment with PVC volumes when persistence is enabled
    set:
      workloadType: Deployment
      persistence.enabled: true
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.volumeClaimTemplates
      - equal:
          path: spec.template.spec.volumes[0].name
          value: run
      - equal:
          path: spec.template.spec.volumes[0].emptyDir.sizeLimit
          value: 10Mi
      - equal:
          path: spec.template.spec.volumes[1].name
          value: config
      - equal:
          path: spec.template.spec.volumes[1].persistentVolumeClaim.claimName
          value: RELEASE-NAME-adguard-home-config
      - equal:
          path: spec.template.spec.volumes[2].name
          value: work
      - equal:
          path: spec.template.spec.volumes[2].persistentVolumeClaim.claimName
          value: RELEASE-NAME-adguard-home-work

  - it: should render Deployment with emptyDir volumes when persistence is disabled
    set:
      workloadType: Deployment
      persistence.enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.volumeClaimTemplates
      - equal:
          path: spec.template.spec.volumes[0].name
          value: run
      - equal:
          path: spec.template.spec.volumes[0].emptyDir.sizeLimit
          value: 10Mi
      - equal:
          path: spec.template.spec.volumes[1].name
          value: config
      - equal:
          path: spec.template.spec.volumes[1].emptyDir
          value: {}
      - equal:
          path: spec.template.spec.volumes[2].name
          value: work
      - equal:
          path: spec.template.spec.volumes[2].emptyDir
          value: {}

---
suite: test extra environment variables
templates:
  - deployment.yaml
tests:
  - it: should include extra environment variables when specified
    set:
      extraEnvVars:
        - name: CUSTOM_VAR
          value: "test_value"
        - name: ANOTHER_VAR
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: my-key
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: CUSTOM_VAR
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: test_value
      - equal:
          path: spec.template.spec.containers[0].env[2].name
          value: ANOTHER_VAR
      - exists:
          path: spec.template.spec.containers[0].env[2].valueFrom

---
suite: test startup probe configuration
templates:
  - deployment.yaml
tests:
  - it: should not include startup probe when disabled
    set:
      healthCheck.enabled: true
      healthCheck.startupProbe.enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.containers[0].startupProbe

  - it: should include startup probe when enabled and capability available
    set:
      healthCheck.enabled: true
      healthCheck.startupProbe.enabled: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: http-admin
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 5
---
suite: test custom image configuration
templates:
  - deployment.yaml
tests:
  - it: should use custom image tag when specified
    set:
      image.tag: "v0.108.0"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].image
          value: 11notes/adguard:v0.108.0

  - it: should use custom image repository and tag
    set:
      image.repository: "custom/adguard"
      image.tag: "latest"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom/adguard:latest

  - it: should use default tag when image.tag is empty
    set:
      image.tag: ""
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].image
          value: 11notes/adguard:0.107.67

---
suite: test PVC with StatefulSet
templates:
  - pvc.yaml
tests:
  - it: should not render PVCs when using StatefulSet
    set:
      workloadType: StatefulSet
    asserts:
      - hasDocuments:
          count: 0
